"""
Thanks to Boris Dayma (https://github.com/borisdayma/dalle-mini) and Brett Kuprel (https://github.com/kuprel/min-dalle)
for their work on Dalle Mini and Min-Dalle.
"""

import os

import gradio as gr
import lightning as L
from lightning.app.components.serve import ServeGradio
from loguru import logger
from PIL import Image


class ModelDemo(ServeGradio):
    """Serve model with Gradio UI.

    You need to define i. `build_model` and ii. `predict` method and Lightning `ServeGradio` component will
    automatically launch the Gradio interface.
    """

    inputs = [
        gr.inputs.Textbox(
            default="Rusty Iron Man suit found abandoned in the woods being reclaimed by nature",
            label="Generate images from a text prompt",
        ),
        gr.inputs.Slider(default=1, minimum=1, maximum=10, step=1, label="Grid Size (number of generated image"),
    ]
    outputs = gr.outputs.Image(label="Images generated by Dalle Mini", type="pil")
    enable_queue = True
    examples = [
        ["cat in a cup", 4],
        ["sunset over a lake in the mountains", 3],
    ]
    OUTPUT_IMAGES = int(os.environ.get("OUTPUT_IMAGES", 1))
    VERBOSE = False

    def __init__(self):
        super().__init__(parallel=True, cloud_compute=L.CloudCompute("cpu-medium"))
        logger.debug(f"OUTPUT_IMAGES={self.OUTPUT_IMAGES}")

    def build_model(self):
        from min_dalle import MinDalle

        model = MinDalle(is_mega=False, is_reusable=True, models_root="./pretrained")
        logger.info("Model loaded...")
        return model

    def predict(self, text: str, grid_size: int) -> Image.Image:
        import torch

        logger.debug(f"Request received, text: {text} | grid_size:{grid_size}")
        with torch.inference_mode():
            image = self.model.generate_image(
                text=text, seed=-1, grid_size=grid_size, log2_supercondition_factor=3, is_verbose=self.VERBOSE
            )
        logger.debug("image generated")
        return image
